<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

namespace <#= _testClassDefinition.Namespace #>
{
    [TestClass]
    public class <#= _testClassDefinition.ClassName #>
    {
        private <#= _testClassDefinition.TargetBaseType #> _target;

<# 
foreach (var mock in _testClassDefinition.Dependencies)
{
#>
        private Mock<<#= mock #>> _mock<#= mock #>;
<#
}
if (_testClassDefinition.Dependencies.Any())
{
#>

<#
}
#>
        [TestInitialize]
        public void TestInitialize()
        {
<# 
foreach (var mock in _testClassDefinition.Dependencies)
{
#>
            _mock<#= mock #> = new Mock<<#= mock #>>(MockBehavior.Strict);
<#
}
if (_testClassDefinition.Dependencies.Any())
{
#>

<#
}
#>
            _target = new <#= _testClassDefinition.TargetClassName #>(<#= GetDependencyObjects() #>);
        }

<#
if (_testClassDefinition.Dependencies.Any())
{
#>
        [TestCleanup]
        public void TestCleanup()
        {
<# 
    foreach (var mock in _testClassDefinition.Dependencies)
    {
#>
            _mock<#= mock #>.VerifyAll();
<#
    }
#>
        }

<#
}
foreach (var method in _testClassDefinition.Methods)
{
#>
        [TestMethod]
        public void <#= method #>()
        {
        }
<#
}
#>
    }
}
<#+
private string GetDependencyObjects()
{
    return string.Join(", ", _testClassDefinition.Dependencies.Select(_ => $"_mock{_}.Object"));
}
#>
